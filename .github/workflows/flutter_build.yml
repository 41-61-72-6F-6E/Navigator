name: Flutter Build

on:
  push:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Set environment variables for the job
    env:
      API_URL: ${{ secrets.API_URL }}

    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup Java (required for Android builds)
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    # Setup Flutter
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'  # Use latest stable version (includes Dart 3.8.1+)
        cache: true  # Enable caching for faster builds

    - name: Setup signing
      run: |
        mkdir -p navigator/android
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > navigator/android/my-release-key.jks
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > navigator/android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> navigator/android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> navigator/android/key.properties
        echo "storeFile=my-release-key.jks" >> navigator/android/key.properties

    - name: Debug signing setup
      run: |
        cd navigator/android
        echo "=== Contents of key.properties ==="
        cat key.properties
        echo "=== Checking if keystore file exists ==="
        ls -la my-release-key.jks
        echo "=== Current directory structure ==="
        find . -name "*.jks" -o -name "key.properties"

    - name: Verify Keystore Alias
      run: |
        echo "üîç Checking keystore alias and cert fingerprints..."
        keytool -list -v \
          -keystore my-release-key.jks \
          -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
          | grep -E "Alias name:|SHA1:|SHA256:"
      working-directory: navigator/android

    # Get Flutter dependencies
    - name: Get dependencies
      run: |
        cd navigator
        flutter pub get
    
    # Generate code (for env.g.dart and other generated files)
    - name: Generate code
      run: |
        cd navigator
        dart run build_runner build --delete-conflicting-outputs
      env:
        API_URL: ${{ secrets.API_URL }}

    # Run tests (only if test directory exists)
    - name: Check if tests exist
      id: check_tests
      run: |
        cd navigator
        if [ -d "test" ]; then
          echo "tests_exist=true" >> $GITHUB_OUTPUT
        else
          echo "tests_exist=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run tests
      if: steps.check_tests.outputs.tests_exist == 'true'
      run: |
        cd navigator
        flutter test
    
    # Analyze code
    - name: Analyze code (nur echte Fehler blockieren)
      run: |
        cd navigator
        flutter analyze -v > analysis.log || true
        cat analysis.log
        if grep -q "error ‚Ä¢" analysis.log; then
          echo "‚ùå Echte Fehler gefunden ‚Äì Build wird abgebrochen"
          exit 1
        else
          echo "‚úÖ Keine echten Fehler ‚Äì Lints ignoriert"
        fi

    # Update Version
    - name: Set Flutter Version
      run: |
        cd navigator
        VERSION_NAME="0.0.${GITHUB_RUN_NUMBER}"
        VERSION_CODE=${GITHUB_RUN_NUMBER}
        echo "Updating pubspec.yaml to version $VERSION_NAME+$VERSION_CODE"
        sed -i "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml

    # Build APK for Android
    - name: Build APK
      run: |
        cd navigator
        flutter build apk --release

    - name: Verify APK Signature
      run: |
        echo "üîç Checking APK signature..."
        $ANDROID_SDK_ROOT/build-tools/$(ls $ANDROID_SDK_ROOT/build-tools | sort -V | tail -n 1)/apksigner verify --print-certs \
          navigator/build/app/outputs/flutter-apk/app-release.apk

    # Build App Bundle for Android (recommended for Play Store)
    - name: Build App Bundle
      run: |
        cd navigator
        flutter build appbundle --release
    
    # Upload build artifacts
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: navigator/build/app/outputs/flutter-apk/app-release.apk

    - name: Upload App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: release-bundle
        path: navigator/build/app/outputs/bundle/release/app-release.aab

  build-ios:
    runs-on: macos-latest

    env:
      API_URL: ${{ secrets.API_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: |
          cd navigator
          flutter pub get

      - name: Run code generation (build_runner)
        run: |
          cd navigator
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build IPA (no code signing)
        run: |
          cd navigator
          flutter build ipa --no-codesign

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: navigator/build/ios/ipa/*.ipa

    # Note: For signed iOS builds, you'll need to configure code signing
    # which requires additional setup with certificates and provisioning profiles